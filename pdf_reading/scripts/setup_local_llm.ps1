# Setup LLM PDF Reading - Modelos Locais Gratuitos
# PowerShell Script

Write-Host ""
Write-Host "================================================" -ForegroundColor Green
Write-Host "   ü§ñ LLM PDF Reading - Setup Modelos Locais" -ForegroundColor Green
Write-Host "   üéØ 100% Gratuito usando GPU local!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host ""

# Navegar para o diret√≥rio do projeto
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectDir = Split-Path -Parent $ScriptDir
Set-Location $ProjectDir

Write-Host "üîç Verificando estrutura do projeto..." -ForegroundColor Yellow
Write-Host "üìÅ Diret√≥rio atual: $PWD" -ForegroundColor Cyan

if (-not (Test-Path "requirements.txt")) {
    Write-Host "‚ùå Arquivo requirements.txt n√£o encontrado!" -ForegroundColor Red
    Write-Host "üí° Execute este script do diret√≥rio scripts/ do projeto" -ForegroundColor Yellow
    Read-Host "Pressione Enter para sair"
    exit 1
}

if (-not (Test-Path "pyproject.toml")) {
    Write-Host "‚ùå Arquivo pyproject.toml n√£o encontrado!" -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

Write-Host "‚úÖ Projeto encontrado: $PWD" -ForegroundColor Green
Write-Host ""

# Verificar Python
Write-Host "üêç Verificando vers√£o do Python..." -ForegroundColor Yellow
try {
    $PythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python detectado: $PythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n√£o encontrado no PATH!" -ForegroundColor Red
    Write-Host "üí° Instale Python ou ative o ambiente virtual" -ForegroundColor Yellow
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar ambiente virtual
if (Test-Path ".venv") {
    Write-Host "üîß Ambiente virtual encontrado" -ForegroundColor Green
    Write-Host "üí° Certifique-se de que est√° ativado: .venv\Scripts\Activate.ps1" -ForegroundColor Yellow
} else {
    Write-Host "‚ö†Ô∏è  Ambiente virtual n√£o encontrado" -ForegroundColor Yellow
    Write-Host "üí° Recomendado criar um: python -m venv .venv" -ForegroundColor Yellow
}

Write-Host ""

# Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias Python..." -ForegroundColor Yellow
try {
    pip install -r requirements.txt
    if ($LASTEXITCODE -ne 0) {
        throw "Erro na instala√ß√£o"
    }
    Write-Host "‚úÖ Depend√™ncias instaladas com sucesso!" -ForegroundColor Green
} catch {
    Write-Host ""
    Write-Host "‚ùå Erro ao instalar depend√™ncias!" -ForegroundColor Red
    Write-Host "üí° Poss√≠veis solu√ß√µes:" -ForegroundColor Yellow
    Write-Host "   1. Ative o ambiente virtual: .venv\Scripts\Activate.ps1" -ForegroundColor Cyan
    Write-Host "   2. Atualize pip: python -m pip install --upgrade pip" -ForegroundColor Cyan
    Write-Host "   3. Verifique a vers√£o do Python: python --version" -ForegroundColor Cyan
    Write-Host "   4. Tente instalar manualmente: pip install torch transformers" -ForegroundColor Cyan
    Write-Host ""
    Read-Host "Pressione Enter para continuar mesmo assim"
}

Write-Host ""

# Verificar GPU NVIDIA
Write-Host "üîç Verificando GPU NVIDIA..." -ForegroundColor Yellow
try {
    nvidia-smi | Out-Null
    Write-Host "‚úÖ GPU NVIDIA detectada!" -ForegroundColor Green
    Write-Host "üì¶ Instalando PyTorch com CUDA..." -ForegroundColor Yellow
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
} catch {
    Write-Host "‚ö†Ô∏è  GPU NVIDIA n√£o detectada, usando CPU" -ForegroundColor Yellow
    Write-Host "üì¶ Instalando PyTorch CPU..." -ForegroundColor Yellow
    pip install torch torchvision torchaudio
}

Write-Host ""

# Configurar Ollama
Write-Host "ü¶ô Configurando Ollama..." -ForegroundColor Yellow
Write-Host ""
Write-Host "IMPORTANTE: Para usar Ollama (recomendado):" -ForegroundColor Cyan
Write-Host "1. Baixe de: https://ollama.ai/download/windows" -ForegroundColor White
Write-Host "2. Execute o instalador" -ForegroundColor White
Write-Host "3. Reinicie este script" -ForegroundColor White
Write-Host ""

try {
    ollama --version | Out-Null
    Write-Host "‚úÖ Ollama detectado!" -ForegroundColor Green
    Write-Host "üì• Baixando modelo llama2:7b..." -ForegroundColor Yellow
    ollama pull llama2:7b
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Modelo llama2:7b baixado!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Erro ao baixar modelo, mas Ollama est√° instalado" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Ollama n√£o encontrado" -ForegroundColor Red
    Write-Host "üí° Instale Ollama para usar modelos locais otimizados" -ForegroundColor Yellow
}

Write-Host ""

# Testar sistema
Write-Host "üß™ Executando teste do sistema..." -ForegroundColor Yellow
try {
    python examples/local_llm_test.py
} catch {
    Write-Host "‚ö†Ô∏è  Erro ao executar teste, mas isso √© normal se as depend√™ncias ainda n√£o est√£o completas" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "================================================" -ForegroundColor Green
Write-Host "   üéâ Setup conclu√≠do!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "   1. Configure o arquivo .env se necess√°rio" -ForegroundColor White
Write-Host "   2. Teste: python examples/local_llm_test.py" -ForegroundColor White
Write-Host "   3. Interface web: streamlit run apps/streamlit_app.py" -ForegroundColor White
Write-Host ""
Write-Host "üí° Modelos recomendados para Ollama:" -ForegroundColor Yellow
Write-Host "   - ollama pull llama2:7b      (Modelo geral)" -ForegroundColor White
Write-Host "   - ollama pull mistral:7b     (R√°pido e eficiente)" -ForegroundColor White
Write-Host "   - ollama pull codellama:7b   (Para c√≥digo)" -ForegroundColor White
Write-Host ""

Read-Host "Pressione Enter para sair"
