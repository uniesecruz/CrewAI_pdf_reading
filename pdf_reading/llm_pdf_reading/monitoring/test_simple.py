#!/usr/bin/env python3
"""
Teste simplificado para verificar se os erros foram corrigidos
"""

import sys
import os
import time
from pathlib import Path

# Adicionar path do projeto
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

import mlflow

def test_mlflow_basic():
    """Teste b√°sico do MLflow para verificar configura√ß√£o"""
    print("üß™ TESTE B√ÅSICO DO MLFLOW")
    print("="*50)
    
    try:
        # Configurar MLflow
        mlflow.set_tracking_uri("sqlite:///mlflow.db")
        mlflow.set_experiment("Simple_Test")
        
        # Finalizar run ativo se existir
        try:
            active_run = mlflow.active_run()
            if active_run:
                print("‚ö†Ô∏è Finalizando run MLflow ativo...")
                mlflow.end_run()
        except Exception as e:
            print(f"Aviso: {e}")
        
        # Teste simples
        with mlflow.start_run(run_name="basic_test"):
            mlflow.log_param("test_param", "valor_teste")
            mlflow.log_metric("test_metric", 42.0)
            
            print("‚úÖ Par√¢metro registrado: test_param = 'valor_teste'")
            print("‚úÖ M√©trica registrada: test_metric = 42.0")
            
            # Teste nested run
            try:
                with mlflow.start_run(nested=True, run_name="nested_test"):
                    mlflow.log_metric("nested_metric", 3.14)
                    print("‚úÖ Nested run funcionando!")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro em nested run: {e}")
        
        print("‚úÖ Teste MLflow conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste MLflow: {e}")
        return False

def test_imports():
    """Teste de imports do sistema de monitoramento"""
    print("\nüîç TESTE DE IMPORTS")
    print("="*50)
    
    try:
        # Testar imports b√°sicos
        from llm_pdf_reading.monitoring import model_monitor
        print("‚úÖ model_monitor importado")
        
        from llm_pdf_reading.monitoring.decorators import monitor_pdf_operation
        print("‚úÖ decorators importado")
        
        # Testar inicializa√ß√£o
        if not model_monitor.is_monitoring:
            model_monitor.start_monitoring()
            print("‚úÖ Sistema de monitoramento iniciado")
        else:
            print("‚úÖ Sistema de monitoramento j√° ativo")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False

def test_file_access():
    """Teste de acesso ao arquivo PDF"""
    print("\nüìÑ TESTE DE ACESSO AO ARQUIVO")
    print("="*50)
    
    pdf_path = r"c:\Users\win\Desktop\Projetos\pdf_reading\pdf_reading\data\external\Random_Forest.pdf"
    
    try:
        if os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path)
            print(f"‚úÖ Arquivo encontrado: {pdf_path}")
            print(f"‚úÖ Tamanho: {file_size / 1024:.2f} KB")
            return True
        else:
            print(f"‚ùå Arquivo n√£o encontrado: {pdf_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao acessar arquivo: {e}")
        return False

def main():
    """Teste principal simplificado"""
    print("üîß TESTE SIMPLIFICADO - VERIFICA√á√ÉO DE CORRE√á√ïES")
    print("="*60)
    
    results = []
    
    # Teste 1: MLflow b√°sico
    results.append(test_mlflow_basic())
    
    # Teste 2: Imports
    results.append(test_imports())
    
    # Teste 3: Arquivo
    results.append(test_file_access())
    
    # Resultado final
    successful_tests = sum(results)
    total_tests = len(results)
    
    print(f"\nüéØ RESULTADO FINAL")
    print("="*50)
    print(f"‚úÖ Testes bem-sucedidos: {successful_tests}/{total_tests}")
    print(f"üìä Taxa de sucesso: {(successful_tests/total_tests)*100:.1f}%")
    
    if successful_tests == total_tests:
        print("üéâ Todos os testes passaram! Sistema corrigido.")
        return True
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verificar erros acima.")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚ú® Corre√ß√µes verificadas com sucesso!")
    else:
        print("\nüí• Ainda h√° problemas a resolver!")
