#!/usr/bin/env python3
"""
Script para analisar e visualizar as m√©tricas do MLflow
do teste de an√°lise de PDF Random Forest
"""

import sys
import os
import pandas as pd
from pathlib import Path

# Adicionar path do projeto
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

import mlflow
import mlflow.tracking

def analyze_mlflow_metrics():
    """
    Analisa as m√©tricas registradas no MLflow de forma detalhada
    """
    print("üìà AN√ÅLISE DETALHADA DAS M√âTRICAS MLFLOW")
    print("="*70)
    
    # Configurar MLflow
    mlflow.set_tracking_uri("sqlite:///mlflow.db")
    
    try:
        # Obter experimento
        experiment = mlflow.get_experiment_by_name("Random_Forest_PDF_Analysis")
        if not experiment:
            print("‚ùå Experimento n√£o encontrado!")
            return
        
        print(f"üß™ Experimento: {experiment.name}")
        print(f"üìÅ ID: {experiment.experiment_id}")
        print(f"üóÑÔ∏è URI: {mlflow.get_tracking_uri()}")
        
        # Buscar todas as execu√ß√µes
        runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id])
        
        if runs.empty:
            print("‚ùå Nenhuma execu√ß√£o encontrada!")
            return
        
        print(f"\nüìä Total de execu√ß√µes encontradas: {len(runs)}")
        
        # Analisar a execu√ß√£o mais recente
        latest_run = runs.iloc[0]
        
        print(f"\nüîç AN√ÅLISE DA EXECU√á√ÉO MAIS RECENTE:")
        print(f"   üìù Nome: {latest_run.get('tags.mlflow.runName', 'N/A')}")
        print(f"   ‚úÖ Status: {latest_run['status']}")
        print(f"   üïê In√≠cio: {latest_run['start_time']}")
        print(f"   üèÅ Fim: {latest_run.get('end_time', 'N/A')}")
        
        # Separar m√©tricas por categoria
        metrics_columns = [col for col in runs.columns if col.startswith('metrics.')]
        params_columns = [col for col in runs.columns if col.startswith('params.')]
        
        print(f"\nüìä M√âTRICAS REGISTRADAS ({len(metrics_columns)} m√©tricas):")
        
        # Categorizar m√©tricas
        theme_metrics = []
        extraction_metrics = []
        rf_metrics = []
        performance_metrics = []
        success_metrics = []
        
        for col in metrics_columns:
            metric_name = col.replace('metrics.', '')
            value = latest_run[col]
            
            if pd.notna(value):
                if 'theme' in metric_name:
                    theme_metrics.append((metric_name, value))
                elif 'extract' in metric_name or 'pages' in metric_name or 'words' in metric_name or 'characters' in metric_name:
                    extraction_metrics.append((metric_name, value))
                elif 'rf_' in metric_name or 'content_' in metric_name or 'technical_' in metric_name:
                    rf_metrics.append((metric_name, value))
                elif 'time' in metric_name or 'efficiency' in metric_name:
                    performance_metrics.append((metric_name, value))
                elif 'success' in metric_name or 'rate' in metric_name or 'score' in metric_name:
                    success_metrics.append((metric_name, value))
        
        # Exibir m√©tricas por categoria
        if theme_metrics:
            print(f"\nüéØ M√âTRICAS DE AN√ÅLISE DE TEMA:")
            for metric, value in theme_metrics:
                if 'percentage' in metric or 'confidence' in metric:
                    print(f"   üìà {metric.replace('_', ' ').title()}: {value:.1f}%")
                else:
                    print(f"   üìà {metric.replace('_', ' ').title()}: {value:.2f}")
        
        if extraction_metrics:
            print(f"\nüìÑ M√âTRICAS DE EXTRA√á√ÉO DE TEXTO:")
            for metric, value in extraction_metrics:
                if 'percentage' in metric or 'efficiency' in metric:
                    print(f"   üìä {metric.replace('_', ' ').title()}: {value:.1f}%")
                elif 'time' in metric:
                    print(f"   ‚è±Ô∏è {metric.replace('_', ' ').title()}: {value:.3f}s")
                else:
                    print(f"   üìä {metric.replace('_', ' ').title()}: {value:.0f}")
        
        if rf_metrics:
            print(f"\nüå≥ M√âTRICAS DE RANDOM FOREST:")
            for metric, value in rf_metrics:
                if 'percentage' in metric or 'density' in metric or 'depth' in metric:
                    print(f"   üîç {metric.replace('_', ' ').title()}: {value:.2f}%")
                else:
                    print(f"   üîç {metric.replace('_', ' ').title()}: {value:.0f}")
        
        if performance_metrics:
            print(f"\n‚ö° M√âTRICAS DE PERFORMANCE:")
            for metric, value in performance_metrics:
                print(f"   ‚è±Ô∏è {metric.replace('_', ' ').title()}: {value:.3f}s")
        
        if success_metrics:
            print(f"\nüèÜ M√âTRICAS DE SUCESSO E QUALIDADE:")
            for metric, value in success_metrics:
                if 'rate' in metric or 'percentage' in metric:
                    print(f"   üìà {metric.replace('_', ' ').title()}: {value:.1f}%")
                else:
                    print(f"   üèÜ {metric.replace('_', ' ').title()}: {value:.1f}")
        
        # Par√¢metros registrados
        print(f"\nüìã PAR√ÇMETROS REGISTRADOS ({len(params_columns)} par√¢metros):")
        for col in params_columns:
            param_name = col.replace('params.', '')
            value = latest_run[col]
            if pd.notna(value):
                print(f"   üìù {param_name.replace('_', ' ').title()}: {value}")
        
        # Estat√≠sticas gerais
        print(f"\nüìä ESTAT√çSTICAS GERAIS:")
        
        # Calcular m√©tricas m√©dias se houver m√∫ltiplas execu√ß√µes
        if len(runs) > 1:
            print(f"   üìà Total de execu√ß√µes: {len(runs)}")
            
            # M√©tricas de sucesso m√©dias
            success_cols = [col for col in metrics_columns if 'success' in col]
            for col in success_cols:
                if col in runs.columns:
                    avg_success = runs[col].mean() * 100
                    print(f"   ‚úÖ {col.replace('metrics.', '').replace('_', ' ').title()} m√©dio: {avg_success:.1f}%")
            
            # Tempo m√©dio de processamento
            time_cols = [col for col in metrics_columns if 'time' in col]
            for col in time_cols:
                if col in runs.columns:
                    avg_time = runs[col].mean()
                    print(f"   ‚è±Ô∏è {col.replace('metrics.', '').replace('_', ' ').title()} m√©dio: {avg_time:.3f}s")
        
        # Insights e recomenda√ß√µes
        print(f"\nüí° INSIGHTS E RECOMENDA√á√ïES:")
        
        # An√°lise de tema
        theme_confidence = latest_run.get('metrics.theme_confidence', 0)
        if theme_confidence < 20:
            print(f"   ‚ö†Ô∏è Confian√ßa do tema baixa ({theme_confidence:.1f}%) - considere melhorar o algoritmo de detec√ß√£o")
        elif theme_confidence > 80:
            print(f"   ‚úÖ Excelente confian√ßa do tema ({theme_confidence:.1f}%)")
        
        # An√°lise de extra√ß√£o
        extraction_efficiency = latest_run.get('metrics.extraction_efficiency_percentage', 100)
        if extraction_efficiency < 50:
            print(f"   ‚ö†Ô∏è Efici√™ncia de extra√ß√£o baixa ({extraction_efficiency:.1f}%) - processar mais p√°ginas")
        
        # An√°lise de conte√∫do RF
        content_density = latest_run.get('metrics.content_density', 0)
        if content_density > 5:
            print(f"   ‚úÖ Alta densidade de conte√∫do Random Forest ({content_density:.2f}%)")
        elif content_density < 1:
            print(f"   ‚ö†Ô∏è Baixa densidade de conte√∫do Random Forest ({content_density:.2f}%)")
        
        print(f"\nüîó PR√ìXIMOS PASSOS:")
        print(f"   üåê Iniciar MLflow UI: mlflow ui")
        print(f"   üìä Acessar dashboard: http://localhost:5000")
        print(f"   üìà Comparar execu√ß√µes para identificar padr√µes")
        print(f"   üîç Analisar correla√ß√µes entre m√©tricas")
        print(f"   üìã Exportar dados: mlflow.search_runs()")
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        import traceback
        traceback.print_exc()

def generate_metrics_summary():
    """
    Gera um resumo das principais m√©tricas para relat√≥rio
    """
    print(f"\n" + "="*70)
    print("üìã RESUMO EXECUTIVO DAS M√âTRICAS")
    print("="*70)
    
    try:
        mlflow.set_tracking_uri("sqlite:///mlflow.db")
        experiment = mlflow.get_experiment_by_name("Random_Forest_PDF_Analysis")
        
        if experiment:
            runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id], max_results=1)
            
            if not runs.empty:
                latest_run = runs.iloc[0]
                
                print(f"üéØ RESUMO DA AN√ÅLISE:")
                print(f"   üìÑ Documento: {latest_run.get('params.pdf_file', 'N/A')}")
                print(f"   üé≠ Tema esperado: {latest_run.get('params.expected_theme', 'N/A')}")
                print(f"   ü§ñ Tema detectado: {latest_run.get('params.main_theme', 'N/A')}")
                print(f"   üìà Confian√ßa: {latest_run.get('metrics.theme_confidence', 0):.1f}%")
                print(f"   üéØ Correspond√™ncia: {latest_run.get('metrics.theme_match_score', 0):.1f}%")
                
                print(f"\nüìä PERFORMANCE:")
                print(f"   ‚úÖ Taxa de sucesso geral: {latest_run.get('metrics.overall_success_rate', 0):.1f}%")
                print(f"   üèÜ Score de qualidade: {latest_run.get('metrics.quality_score', 0):.1f}")
                print(f"   ‚è±Ô∏è Tempo total: {latest_run.get('metrics.total_processing_time', 0):.2f}s")
                
                print(f"\nüå≥ AN√ÅLISE DE CONTE√öDO:")
                print(f"   üìù Palavras extra√≠das: {latest_run.get('metrics.extracted_words', 0):.0f}")
                print(f"   üîç Men√ß√µes Random Forest: {latest_run.get('metrics.total_rf_mentions', 0):.0f}")
                print(f"   üìà Densidade do conte√∫do: {latest_run.get('metrics.content_density', 0):.2f}%")
                print(f"   üéØ Profundidade t√©cnica: {latest_run.get('metrics.technical_depth', 0):.1f}%")
                
                print(f"\nüí° CONCLUS√ÉO:")
                overall_success = latest_run.get('metrics.overall_success_rate', 0)
                if overall_success == 100:
                    print(f"   üéâ An√°lise completamente bem-sucedida!")
                elif overall_success >= 66:
                    print(f"   ‚úÖ An√°lise majoritariamente bem-sucedida")
                else:
                    print(f"   ‚ö†Ô∏è An√°lise com limita√ß√µes - revisar configura√ß√µes")
    
    except Exception as e:
        print(f"‚ùå Erro no resumo: {e}")

def main():
    """
    Fun√ß√£o principal para an√°lise das m√©tricas MLflow
    """
    print("üìä ANALISADOR DE M√âTRICAS MLFLOW - RANDOM FOREST PDF")
    print("="*70)
    
    # Verificar se o banco MLflow existe
    if not os.path.exists("mlflow.db"):
        print("‚ùå Banco de dados MLflow n√£o encontrado!")
        print("üí° Execute primeiro: python test_random_forest_pdf.py")
        return
    
    # Executar an√°lises
    analyze_mlflow_metrics()
    generate_metrics_summary()
    
    print(f"\n‚ú® An√°lise conclu√≠da! Use 'mlflow ui' para explorar visualmente.")

if __name__ == "__main__":
    main()
