"""
Aplica√ß√£o Streamlit para interface web do sistema de leitura de PDFs
"""
import streamlit as st
import tempfile
import os
from pathlib import Path
import sys

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(str(Path(__file__).parent.parent))

from llm_pdf_reading.orchestrator import PDFReadingOrchestrator

def main():
    st.title("ü§ñ LLM PDF Reading - An√°lise Inteligente de PDFs")
    st.markdown("Fa√ßa upload de um PDF e deixe nossa IA analisar o conte√∫do para voc√™!")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Sele√ß√£o do modelo LLM
        llm_provider = st.selectbox(
            "Provedor de LLM",
            ["OpenAI", "Anthropic", "Google"]
        )
        
        # Configura√ß√µes de chunk
        chunk_size = st.slider("Tamanho do Chunk", 500, 2000, 1000)
        chunk_overlap = st.slider("Sobreposi√ß√£o", 100, 500, 200)
    
    # Upload de arquivo
    uploaded_file = st.file_uploader(
        "Escolha um arquivo PDF",
        type="pdf",
        help="Fa√ßa upload de um arquivo PDF para an√°lise"
    )
    
    if uploaded_file is not None:
        # Salvar arquivo temporariamente
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_file_path = tmp_file.name
        
        try:
            # Mostrar informa√ß√µes do arquivo
            st.info(f"üìÑ Arquivo: {uploaded_file.name} ({uploaded_file.size} bytes)")
            
            # Bot√£o para processar
            if st.button("üöÄ Processar PDF", type="primary"):
                with st.spinner("Processando PDF... Isso pode levar alguns momentos."):
                    # Inicializar orquestrador
                    orchestrator = PDFReadingOrchestrator()
                    
                    # Processar PDF
                    result = orchestrator.process_pdf(tmp_file_path)
                    
                    if result["success"]:
                        # Mostrar resultados
                        st.success("‚úÖ PDF processado com sucesso!")
                        
                        # Tabs para diferentes visualiza√ß√µes
                        tab1, tab2, tab3, tab4 = st.tabs(["üìä An√°lise", "üìù Conte√∫do", "üìã Metadados", "‚ùì Perguntas"])
                        
                        with tab1:
                            st.subheader("An√°lise do Documento")
                            analysis = result["analysis"]
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("Palavras", analysis["word_count"])
                            with col2:
                                st.metric("Caracteres", analysis["character_count"])
                            with col3:
                                st.metric("Tempo de Leitura (min)", analysis["estimated_reading_time"])
                            
                            st.write("**T√≥picos Principais:**")
                            for topic in analysis["key_topics"]:
                                st.write(f"‚Ä¢ {topic}")
                            
                            st.write("**Resumo:**")
                            st.write(analysis["summary"])
                        
                        with tab2:
                            st.subheader("Conte√∫do Extra√≠do")
                            st.text_area(
                                "Texto do PDF",
                                result["content"],
                                height=400,
                                disabled=True
                            )
                            
                            st.write(f"**Total de chunks criados:** {len(result['chunks'])}")
                        
                        with tab3:
                            st.subheader("Metadados do Arquivo")
                            metadata = result["metadata"]
                            if metadata:
                                for key, value in metadata.items():
                                    st.write(f"**{key}:** {value}")
                            else:
                                st.write("Nenhum metadado encontrado.")
                        
                        with tab4:
                            st.subheader("Fa√ßa Perguntas sobre o Documento")
                            question = st.text_input(
                                "Digite sua pergunta:",
                                placeholder="Ex: Qual √© o tema principal do documento?"
                            )
                            
                            if st.button("Responder") and question:
                                with st.spinner("Gerando resposta..."):
                                    answer = orchestrator.answer_question(result["content"], question)
                                    st.write("**Resposta:**")
                                    st.write(answer)
                    
                    else:
                        st.error(f"‚ùå Erro ao processar PDF: {result['error']}")
        
        finally:
            # Limpar arquivo tempor√°rio
            if os.path.exists(tmp_file_path):
                os.unlink(tmp_file_path)
    
    # Informa√ß√µes na sidebar
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üìö Como usar")
        st.markdown("""
        1. Fa√ßa upload de um PDF
        2. Ajuste as configura√ß√µes se necess√°rio
        3. Clique em 'Processar PDF'
        4. Explore os resultados nas diferentes abas
        5. Fa√ßa perguntas sobre o conte√∫do
        """)
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è Sobre")
        st.markdown("""
        Esta aplica√ß√£o usa CrewAI e LLMs para analisar 
        documentos PDF de forma inteligente.
        """)

if __name__ == "__main__":
    main()
